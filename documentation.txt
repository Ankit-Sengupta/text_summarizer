 Documentation: Text Summarizer using Hugging Face API

This document records every step I took while building my AI-powered **Text Summarizer** app ‚Äî including what I tried, what failed, and how I finally got it working.

---

##  Project Overview

**Goal:** Build a small AI-powered app that summarizes long text into 2‚Äì3 concise sentences.  
**Final Tool Used:** Hugging Face API  
**Deployment Platform:** Render  

---

##  Step-by-Step Journey

###  Step 1: Setting Up the Environment
- Installed **Python 3.10** on my system.  
- Created a virtual environment to manage dependencies:
  ```bash
  python -m venv venv
  source venv/bin/activate   
  ```
- Installed basic libraries:
  ```bash
  pip install requests streamlit python-dotenv
  ```

---

###  Step 2: Exploring the OpenAI API (First Attempt)
- I initially tried to use the **OpenAI API** for text summarization.  
- Generated an API key and wrote a Python script using the `openai` package.  
- However, when I ran the program, I received an **‚ÄúQuota Exceeded‚Äù** error ‚Äî the free tier limit was reached.  
- I searched for alternative APIs and found **Hugging Face Inference API** to be a great free alternative.

**Result:**  Failed due to OpenAI quota limits.

---

###  Step 3: Switching to Hugging Face API
- Signed up on [Hugging Face](https://huggingface.co).  
- Generated a new **Hugging Face API key**.  
- Updated my Python code to use the following endpoint:
  ```
  https://api-inference.huggingface.co/models/facebook/bart-large-cnn
  ```
- Sent requests using the `requests` library:
  ```python
  response = requests.post(API_URL, headers={"Authorization": f"Bearer {API_KEY}"}, json={"inputs": text})
  ```
- Parsed the summary successfully.

**Result:**  Success ‚Äî working text summarization with Hugging Face API.

---

###  Step 4: Adding a Simple User Interface
- Decided to use **Streamlit** for a minimal and interactive UI.  
- Created an `app.py` file with an input box for text and a button to generate a summary.  
- Ran it locally:
  ```bash
  streamlit run app.py
  ```
- Verified that the summarizer worked perfectly in the browser.

**Result:**  Local Streamlit app running smoothly.

---

###  Step 5: Deployment Attempts

####  Attempt 1 ‚Äì GitHub Pages
- Tried deploying using GitHub Pages.  
- Found out it only supports static websites (HTML/CSS/JS).  
- Since Streamlit requires a Python backend, it wasn‚Äôt suitable.

**Result:**  Not compatible for Streamlit apps.

####  Attempt 2 ‚Äì Hugging Face Spaces
- Tried using Hugging Face Spaces for deployment.  
- Required YAML configuration and sometimes build errors occurred during model loading.  
- Decided it was too complex for this small project.

**Result:**  Complicated setup.

####  Attempt 3 ‚Äì Render (Final Choice)
- Render provides **free hosting for Python web apps**.  
- Created a new Web Service on [Render](https://render.com).  
- Uploaded the project and added my Hugging Face API key as an environment variable.  
- Used this **Start Command**:
  ```bash
  streamlit run app.py --server.port $PORT --server.address 0.0.0.0
  ```
- Deployment succeeded and the app was live.

**Result:**  Successfully deployed using Render.

---

###  Step 6: Final Testing
- Tested the summarizer with a few paragraphs and news articles.  
- Output was concise, accurate, and worked consistently.  
- Verified that API requests were handled within limits.

---

##  Summary of Tools & Decisions

| Step | Tool/Platform | Result | Notes |
|------|----------------|---------|-------|
| OpenAI API | Text generation |  Failed | Exceeded free quota |
| Hugging Face API | Summarization |  Success | Free and stable |
| GitHub Pages | Deployment | Failed | Only supports static sites |
| Hugging Face Spaces | Deployment |  Complex | Required setup YAML |
| Render | Deployment |  Success | Simple and works perfectly |

---

##  Final Project Structure
```
text-summarizer/
‚îÇ
‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ summarizer.py
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ Documentation.md
```
1. Did you try hard and document your journey?

Yes, I documented every step of my development process, including setup, errors, and alternate solutions.
I initially attempted to use the OpenAI API but ran into a quota limitation. Instead of stopping there, I researched and integrated the Hugging Face API successfully.
All my trials, decisions, and outcomes are recorded in the Documentation.md file.

2.  Did you Google/ChatGPT things and figure it out?

Absolutely, I used Google and ChatGPT extensively to:

Understand API documentation and request formats.

Troubleshoot errors with authentication and request limits.

Compare different deployment options (GitHub Pages, Hugging Face Spaces, and Render).
This helped me quickly identify practical solutions and get the app working efficiently.

3.  Did you go beyond the minimum?

Yes, I went beyond the minimum by:

Adding a Streamlit UI for easy interaction (instead of keeping it a console app).

Deploying it live on Render, so it‚Äôs accessible online.

Managing configuration securely with environment variables (.env).

Writing clean documentation (README.md and Documentation.md) explaining setup, failures, and improvements.



---

## üèÅ Conclusion
This project taught me how to:
- Integrate AI APIs like OpenAI and Hugging Face.  
- Handle API errors and switch to alternatives.  
- Deploy an AI app easily using Render.  

Overall, it was a great learning experience in both **AI integration** and **deployment**.

---

**Author:** [Ankit Sengupta]  
**Intern Assignment:** Build a Tiny AI-Powered App  
**Deployed on:** [Render](https://render.com)
